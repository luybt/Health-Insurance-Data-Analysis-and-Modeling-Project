import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Ler o arquivo CSV diretamente do Google Drive
url = "https://drive.google.com/file/d/1_k6K9o65mXkHz4gEHOmFNsgFmQOA7DfK/view?usp=sharing"
path = "https://drive.google.com/uc?export=download&id="+url.split("/")[-2]
df = pd.read_csv(path)

# Visualizar as primeiras linhas do conjunto de dados
print("Primeiras linhas do conjunto de dados:")
print(df.head())

# Resumo estatístico das variáveis numéricas
print("\nResumo estatístico das variáveis numéricas:")
print(df.describe())

# Distribuição das variáveis
plt.figure(figsize=(12, 8))
sns.pairplot(df)
plt.title('Distribuição das Variáveis')
plt.show()

# Matriz de correlação
correlation_matrix = df.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Matriz de Correlação')
plt.show()

# Teste t de Student - Fumantes vs Não Fumantes
smoker_charges = df[df['smoker'] == 'yes']['charges']
non_smoker_charges = df[df['smoker'] == 'no']['charges']
t_statistic, p_value = stats.ttest_ind(smoker_charges, non_smoker_charges)
print("\nTeste t de Student - Fumantes vs Não Fumantes:")
print("Estatística t:", t_statistic)
print("Valor p:", p_value)
if p_value < 0.05:
    print("Há uma diferença significativa nos encargos do seguro entre fumantes e não fumantes.")
else:
    print("Não há diferença significativa nos encargos do seguro entre fumantes e não fumantes.")

# Comparação de encargos do seguro entre homens e mulheres
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='sex', y='charges')
plt.title('Comparação de Encargos do Seguro entre Homens e Mulheres')
plt.xlabel('Sexo')
plt.ylabel('Encargos do Seguro')
plt.show()

# Modelagem Estatística
# Preparar os dados para modelagem
df['sex'] = df['sex'].map({'male': 0, 'female': 1})
df['smoker'] = df['smoker'].map({'no': 0, 'yes': 1})
df['region'] = df['region'].astype('category').cat.codes

# Dividir os dados em conjunto de treino e teste
X = df.drop('charges', axis=1)
y = df['charges']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinar o modelo de regressão linear
model = LinearRegression()
model.fit(X_train, y_train)

# Avaliar o modelo
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print("\nErro Quadrático Médio (MSE) do Modelo:", mse)

# Coeficientes do modelo
coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
print("\nCoeficientes do Modelo:")
print(coefficients)

# Intercepto do modelo
intercept = model.intercept_
print("\nIntercepto do Modelo:", intercept)

# Relatório completo
print("\nRelatório Completo:")
print("Primeiras linhas do conjunto de dados:")
print(df.head())
print("\nResumo estatístico das variáveis numéricas:")
print(df.describe())
print("\nTeste t de Student - Fumantes vs Não Fumantes:")
print("Estatística t:", t_statistic)
print("Valor p:", p_value)
if p_value < 0.05:
    print("Há uma diferença significativa nos encargos do seguro entre fumantes e não fumantes.")
else:
    print("Não há diferença significativa nos encargos do seguro entre fumantes e não fumantes.")
print("\nErro Quadrático Médio (MSE) do Modelo:", mse)
print("\nCoeficientes do Modelo:")
print(coefficients)
print("\nIntercepto do Modelo:", intercept)
